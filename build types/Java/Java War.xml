<?xml version="1.0" encoding="UTF-8"?>
<BuildType><Version>6.3</Version><OperatingSystem>Java</OperatingSystem><Name>Java War</Name><TaskType>Master</TaskType><Description>Builds a .war file. It uses the Set Classpath, Ant Javac and Ant War Build Tasks to compile and package up all of the dependencies that need to be included in the final target .war file. All of the directory structure requirements of a .war file are built into the Build Service.</Description><FinalTargetExt>.war</FinalTargetExt><BuildTasks><Name>Set Classpath</Name><Description>Add dependencies to the Set Classpath Build Task that need to be included in the class path prior to compilation.</Description><OptionGroups><GroupName>Build Task Options</GroupName><Type>1</Type></OptionGroups></BuildTasks><BuildTasks><Name>Ant Javac</Name><Description>Uses the Ant &quot;javac&quot; task to compile Java source code files. All dependencies added to this Build Task will be compiled using the compiler specified in the &quot;compiler&quot; Option parameter. If you want  to place the compiled files in a subdirectory of the build location, use the &quot;destdir&quot; Option parameter.</Description><OptionGroups><GroupName>Build Task Options</GroupName><Type>1</Type><Options><Flag>debug=</Flag><Type>82</Type><Parameter>true</Parameter><Description>If true, compile source with debug information.</Description></Options><Options><Flag>destdir=</Flag><Type>90</Type><Parameter></Parameter><Description>Indicates the directory, relative to the build directory, where the class files should be stored. If it is not used, the class files will be stored in the build directory.</Description></Options><Options><Flag>compiler=</Flag><Type>91</Type><Parameter>modern</Parameter><Description>Valid parameters are: modern, classic, jikes, gcj, sj, javac1.2, javac1.3 and javac1.4</Description></Options></OptionGroups></BuildTasks><BuildTasks><Name>Ant War</Name><Description>All dependencies placed added at the Ant War Build Task level will end up at a root level in the final target .war file. The exception is the files defined as the parameters for the &quot;webxml&quot; and &quot;manifest&quot; options. These dependencies will be moved into the appropriate directories within the .war file. If these dependencies are derived from a subdirectory (e.g. an IDE project directory), you should set the basedir Option Parameter to that subdirectory.</Description><OptionGroups><GroupName>Build Task Options</GroupName><Type>1</Type><Options><Flag>basedir=</Flag><Type>90</Type><Description>Indicates the directory from which to war the files. If it is not used, the files will be warred directly from the build directory.</Description></Options><Options><Flag>compress=</Flag><Type>90</Type><Parameter>true</Parameter><Description>If true, compress the final target .war file.</Description></Options><Options><Flag>manifest=</Flag><Type>90</Type><Parameter></Parameter><Description>The name of the manifest file to use.</Description></Options><Options><Flag>webxml=</Flag><Type>91</Type><Parameter></Parameter><Description>The name of the deployment descriptor for the final target .war file. It is renamed web.xml and placed in the WEB-INF directory.</Description></Options></OptionGroups><OptionGroups><GroupName>Meta-Inf</GroupName><Type>1</Type><Description>The dependencies added to this Option Group will be placed in the META-INF directory in the final target .war file. If these dependencies are derived from a subdirectory (e.g. an IDE project directory), you should set the dir Option Parameter to that subdirectory.</Description><Options><Flag>dir=</Flag><Type>90</Type><Description>Indicates the directory where the dependencies need to be pulled from. If it is not used, the dependencies will be pulled directly from the build directory.</Description></Options><Options><Flag>prefix=</Flag><Type>95</Type><Parameter>META-INF</Parameter><Description>Ant attribute used to push target the WEB-INF directory in the .war file.</Description></Options></OptionGroups><OptionGroups><GroupName>Web-Inf</GroupName><Type>1</Type><Description>The dependencies added to this Option Group will be placed in the WEB-INF directory in the final target .war file. If these dependencies are derived from a subdirectory (e.g. an IDE project directory), you should set the dir Option Parameter to that subdirectory.</Description><Options><Flag>dir=</Flag><Type>26</Type><Parameter></Parameter><Description>Indicates the directory where the dependencies need to be pulled from. If it is not used, the dependencies will be pulled directly from the build directory.</Description></Options><Options><Flag>prefix=</Flag><Type>95</Type><Parameter>WEB-INF</Parameter><Description>Ant attribute used to push target the WEB-INF directory in the .war file.</Description></Options></OptionGroups><OptionGroups><GroupName>Web-Inf Classes</GroupName><Type>1</Type><Description>The dependencies added to this Option Group will be placed in the WEB-INF/classes directory in the final target .war file If these dependencies are derived from a subdirectory (e.g. an IDE project directory), you should set the dir Option Parameter to that subdirectory.</Description><Options><Flag>dir=</Flag><Type>90</Type><Description>Indicates the directory where the class files need to be pulled from. If it is not used, the classes will be pulled directly from the build directory.</Description></Options><Options><Flag>prefix=</Flag><Type>95</Type><Parameter>WEB-INF/classes</Parameter><Description>Ant attribute used to push target the WEB-INF/classes directory in the .war file.</Description></Options></OptionGroups><OptionGroups><GroupName>Web-Inf Lib</GroupName><Type>1</Type><Description>The dependencies added to this Option Group will be placed in the WEB-INF/lib directory in the final target .war file. If these dependencies are derived from a subdirectory (e.g. an IDE project directory), you should set the dir Option Parameter to that subdirectory.</Description><Options><Flag>dir=</Flag><Type>90</Type><Parameter></Parameter><Description>Indicates the directory where the dependencies need to be pulled from. If it is not used, the dependencies will be pulled directly from the build directory.</Description></Options><Options><Flag>prefix=</Flag><Type>95</Type><Parameter>WEB-INF/lib</Parameter><Description>Ant attribute used to push target the WEB-INF directory in the .war file.</Description></Options></OptionGroups></BuildTasks><Rules><ParentBuildTask>Set Classpath</ParentBuildTask><TargetExt>.classpath</TargetExt><SourceExts>.zip .jar .properties</SourceExts><NameFrom>Final Target</NameFrom><CompilerName>Set Classpath.sc</CompilerName><Makefile>Java</Makefile><ToDir>Final Target</ToDir><OptionGroup><GroupName>Rule Options</GroupName><Type>2</Type></OptionGroup></Rules><Rules><ParentBuildTask>Ant Javac</ParentBuildTask><TargetExt>.javac</TargetExt><SourceExts>.java .jar .class .classpath .wsdljava .copypkg .javac .sqljava .soap .properties</SourceExts><NameFrom>Final Target</NameFrom><CompilerName>Ant Javac Task.sc</CompilerName><Makefile>Java</Makefile><ToDir>Intermediate</ToDir><OptionGroup><GroupName>Rule Options</GroupName><Type>2</Type></OptionGroup></Rules><Rules><ParentBuildTask>Ant War</ParentBuildTask><TargetExt>.war</TargetExt><SourceExts>.javac .jar .class .xml .htm .html .jsp .gif .jpg .jpeg .packages .properties .dtd .mf .MF .mif .css .xmi .mapxmi .dbxmi .tblxmi .wsdl .xsd .schxmi .* .tld .js .isd .wav .png .JPG .toc .PNG</SourceExts><NameFrom>Final Target</NameFrom><CompilerName>Ant War Task.sc</CompilerName><Makefile>Java</Makefile><ToDir>Final Target</ToDir><OptionGroup><GroupName>Rule Options</GroupName><Type>2</Type></OptionGroup></Rules></BuildType>